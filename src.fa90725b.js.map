{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;AA+GA,aAxGA,SAAS,EAAI,GACJ,OAAA,OAAO,GAAO,SAAS,EAAG,KAuGnC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/GA,QAAA,oBAUA,IAAA,EAAA,WAIE,SAAA,EAAY,GAAE,IAAA,EAAQ,EAAA,SAAE,EAAU,EAAA,WAC3B,KAAA,SAAW,EACX,KAAA,WAAa,KACb,KAAA,WAAa,EAqBtB,OAnBE,EAAA,UAAA,MAAA,WAAA,IAAA,EAAA,KACO,KAAA,WAAa,YAAY,WACtB,IAAA,EAAc,KAAK,MACnB,EAAO,EAAK,WAAa,EACzB,EAAyB,KAAK,MAAM,EAAQ,OAC5C,EAA0B,EAAI,KAAK,MAAO,EAAQ,MAAyB,OAC3E,EAAyB,EAAI,KAAK,MAAO,EAAQ,KAAoB,MACrE,EAAyB,EAAI,KAAK,MAAO,EAAQ,IAAc,MACjE,EAAK,YAAc,EACrB,cAAc,EAAK,aAEnB,SAAS,cAAc,6BAA6B,YAAc,EAClE,SAAS,cAAc,8BAA8B,YAAc,EACnE,SAAS,cAAc,6BAA6B,YAAc,EAClE,SAAS,cAAc,6BAA6B,YAAc,EAClE,QAAQ,IAAI,EAAM,EAAO,EAAM,KAEhC,MAEP,EA5BA,GA6BM,EAAiB,IAAI,EAAe,CACxC,SAAU,WACV,WAAY,IAAI,KAAK,kBAEvB,EAAe","file":"src.fa90725b.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\ninterface Timer {\n  selector: string;\n  targetDate: any\n}\n\nfunction pad(value: string | number) {\n  return String(value).padStart(2, '0');\n}\nclass CountdownTimer {\n  public selector: string;\n  public intervalId: NodeJS.Timer;\n  public targetDate:  number ;\n  constructor({ selector, targetDate }: Timer) {\n    this.selector = selector;\n    this.intervalId = null;\n    this.targetDate = targetDate;\n  }\n  start() {\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const time = this.targetDate - currentTime;\n      const days : number | string = Math.floor(time / (1000 * 60 * 60 * 24));\n      const hours: number | string  = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n      const mins: number | string  = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs: number | string  = pad(Math.floor((time % (1000 * 60)) / 1000));\n      if (this.targetDate <= currentTime) {\n        clearInterval(this.intervalId);\n      } else {\n        document.querySelector('span[data-value = \"days\"]').textContent = days;\n        document.querySelector('span[data-value = \"hours\"]').textContent = hours;\n        document.querySelector('span[data-value = \"mins\"]').textContent = mins;\n        document.querySelector('span[data-value = \"secs\"]').textContent = secs;\n        console.log(days, hours, mins, secs);\n      }\n    }, 1000);\n  }\n}\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jul 17, 2022'),\n});\ncountdownTimer.start();\n// const CountdownTimer = {\n//   intervalId: null,\n//   start() {\n//     const targetTime = new Date('Jul 28, 2021 15:06:00');\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const time = targetTime - currentTime;\n//       const days = Math.floor(time / (1000 * 60 * 60 * 24));\n//       const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//       const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//       const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n//       if (targetTime <= currentTime) {\n//         clearInterval(this.intervalId);\n//       } else {\n//         console.log(days, hours, mins, secs);\n//       }\n//     }, 1000);\n//   },\n// };\n// CountdownTimer.start();\n// # Таймер обратного отсчета\n\n// Создай плагин настраиваемого таймера, который ведет обратный отсчет до\n// предварительно определенной даты. Такой плагин может использоваться в блогах и\n// интернет-магазинах, страницах регистрации событий, во время технического\n// обслуживания и т. д.\n\n// ![preview](preview.gif)\n\n// Плагин ожидает следующую HTML-разметку и показывает четыре цифры: дни, часы,\n// минуты и секунды в формате `XX:XX:XX:XX`. Количество дней может состоять из\n// более чем двух цифр.\n\n// Плагин это класс `CountdownTimer`, экземпляр которого создает новый таймер с\n// настройками.\n\n// countdownTimer = new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 17, 2019'),\n// });\n// countdownTimer.start();\n// Для подсчета значений используй следующие готовые формулы, где `time` - разница\n// между `targetDate` и текущей датой.\n\n/*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n// const secs = Math.floor((time % (1000 * 60)) / 1000);\n"]}